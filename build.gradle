import java.nio.file.Paths

plugins {
    id 'war'
}

group 'org.mentalizr'
version '0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(11)
    }
}

repositories {
    mavenCentral()
    maven { url "https://jitpack.io" }
}

dependencies {
    providedCompile 'jakarta.servlet:jakarta.servlet-api:4.0.2'

    implementation 'org.mentalizr:m7r-commons:0.0.1-SNAPSHOT'
    implementation 'org.mentalizr:m7r-backend-proc:1.0-SNAPSHOT'
    implementation 'org.mentalizr:m7r-persistence-mongo:1.0-SNAPSHOT'
    implementation 'org.mentalizr:m7r-persistence-rdbms:1.0-SNAPSHOT'
    implementation 'org.mentalizr:m7r-backend-config:1.0-SNAPSHOT'
    implementation 'org.mentalizr:m7r-service-objects:0.0.1-SNAPSHOT'
    implementation 'org.mentalizr:m7r-content-manager:0.1-SNAPSHOT'

    implementation 'com.github.arthurpicht:utils-core:1.3.0'
    // implementation 'com.github.arthurpicht:AP-Configuration:0.1.0'

    implementation 'org.glassfish.jersey.core:jersey-server:2.30.1'
    implementation 'org.glassfish.jersey.inject:jersey-hk2:2.30.1'
    implementation 'org.glassfish.jersey.containers:jersey-container-servlet:2.30.1'
    implementation 'org.glassfish.jersey.containers:jersey-container-jdk-http:2.30.1'
    implementation 'org.glassfish.jersey.media:jersey-media-jaxb:2.30.1'
    implementation 'org.glassfish.jersey.media:jersey-media-json-binding:2.30.1'

    implementation 'jakarta.xml.bind:jakarta.xml.bind-api:2.3.3'

    implementation 'ch.qos.logback:logback-classic:1.2.10'

    testImplementation 'org.junit.jupiter:junit-jupiter:5.8.2'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.2'
}

test {
    useJUnitPlatform()
}

war() {
    archiveFileName = 'm7r.war'
    from('conf') {
        include 'logback.xml'
        into 'WEB-INF/classes'
    }
    from('conf') {
        include 'm7r.conf'
        into 'WEB-INF/classes'
    }
    from('conf') {
        include 'm7r-instance.conf'
        into 'WEB-INF/classes'
    }
}

task copyResourcesFromFrontend(type: Copy) {
    def frontendProjectHtml = Paths.get("$rootDir").resolve("../m7r-frontend-project/html").toFile()
    if (!frontendProjectHtml.exists()) throw new GradleException("Project m7r-frontend-project not found.");

    inputs.dir("../m7r-frontend-project/html")
    outputs.dir("../src/main/webapp/WEB-INF")

    from frontendProjectHtml
    into "$rootDir/src/main/webapp/WEB-INF"
}

task copyBarnacleConf(type: Copy) {
    def barnacleConf = Paths.get("$rootDir").resolve("../../infra/m7r-config/common/barnacle.conf").normalize().toFile()
    if (!barnacleConf.exists()) throw new GradleException(barnacleConf.absolutePath + " not found.")

    inputs.file(barnacleConf)
    outputs.file("$rootDir/src/main/resources/barnacle.conf")

    from file(barnacleConf)
    into "$rootDir/src/main/resources"
}

task copyWebAppConf(type: Copy) {
    def defaultConfig = "vbox-dev"
    def config = System.getenv("MENTALIZR_CONFIG")
    if (config?.trim()) {
        println "Project configuration specified by MENTALIZR_CONFIG: ${config}"
    } else {
        config = defaultConfig;
        println "MENTALIZR_CONFIG not set. Go on with default: ${config}"
    }

    def logbackConf = Paths.get("$rootDir").resolve("../../infra/m7r-config/common/webapp/logback.xml").normalize().toFile()
    if (!logbackConf.exists()) throw new GradleException(logbackConf.absolutePath + " not found.")
    inputs.file(logbackConf)
    outputs.file("$rootDir/src/main/resources/logback.xml")
    from file(logbackConf)

    def m7rConf = Paths.get("$rootDir").resolve("../../infra/m7r-config/common/webapp/m7r.conf").normalize().toFile()
    if (!m7rConf.exists()) throw new GradleException(m7rConf.absolutePath + " not found.")
    inputs.file(m7rConf)
    outputs.file("$rootDir/src/main/resources/m7r.conf")
    from file(m7rConf)

    def instanceConfPath = "../../infra/m7r-config/" + config + "/m7r-instance.conf"
    def m7rProjectConf = Paths.get("$rootDir").resolve(instanceConfPath).normalize().toFile()
    if (!m7rProjectConf.exists()) throw new GradleException(m7rProjectConf.absolutePath + " not found.")
    inputs.file(m7rProjectConf)
    outputs.file("$rootDir/src/main/resources/m7r-instance.conf")
    from file(m7rProjectConf)

    into "$rootDir/conf"
}

clean {
    delete "$rootDir/src/main/resources/barnacle.conf"
    delete "$rootDir/conf/logback.xml"
    delete "$rootDir/conf/m7r.conf"
    delete "$rootDir/conf/m7r-instance.conf"
    delete fileTree("$rootDir/src/main/webapp/WEB-INF").include('*.html')
}

war.dependsOn copyResourcesFromFrontend
war.dependsOn copyBarnacleConf
war.dependsOn copyWebAppConf
tasks.findByName('war').mustRunAfter('copyResourcesFromFrontend')
tasks.findByName('war').mustRunAfter('copyBarnacleConf')
tasks.findByName('war').mustRunAfter('copyWebAppConf')
