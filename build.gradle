import org.mentalizr.backend.build.task.CopyStaticResourcesFromFrontendTask
import org.mentalizr.backend.build.task.ExpandInitHtmlTask

import java.nio.file.Files
import java.nio.file.Paths
import java.text.SimpleDateFormat

plugins {
    id 'war'
}

group 'org.mentalizr'
version '0.1-SNAPSHOT'

repositories {
    mavenCentral()
    maven { url "https://jitpack.io" }
}

dependencies {
    providedCompile 'jakarta.servlet:jakarta.servlet-api:4.0.4'

    implementation 'org.mentalizr:m7r-commons:0.0.1-SNAPSHOT'
    implementation 'org.mentalizr:m7r-backend-proc:1.0-SNAPSHOT'
    implementation 'org.mentalizr:m7r-persistence-mongo:1.0-SNAPSHOT'
    implementation 'org.mentalizr:m7r-persistence-rdbms:1.0-SNAPSHOT'
    implementation 'org.mentalizr:m7r-backend-config:1.0-SNAPSHOT'
    implementation 'org.mentalizr:m7r-service-objects:0.0.1-SNAPSHOT'
    implementation 'org.mentalizr:m7r-content-manager:0.1-SNAPSHOT'

    implementation 'com.github.arthurpicht:utils-core:1.13.0'
    implementation 'com.github.arthurpicht:utils-io:0.0.17'
    implementation 'com.github.arthurpicht:webAccessControl:0.0.3'

    implementation 'org.glassfish.jersey.core:jersey-server:2.40'
    implementation 'org.glassfish.jersey.inject:jersey-hk2:2.40'
    implementation 'org.glassfish.jersey.containers:jersey-container-servlet:2.40'
    implementation 'org.glassfish.jersey.containers:jersey-container-jdk-http:2.40'
    implementation 'org.glassfish.jersey.media:jersey-media-jaxb:2.40'
    implementation 'org.glassfish.jersey.media:jersey-media-json-binding:2.40'

    implementation 'jakarta.xml.bind:jakarta.xml.bind-api:2.3.3'

    implementation 'ch.qos.logback:logback-classic:1.4.7'

    testImplementation 'org.junit.jupiter:junit-jupiter:5.9.3'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.9.3'
}

test {
    useJUnitPlatform()
}

war() {
    archiveFileName = 'm7r.war'
    from('conf') {
        include 'logback.xml'
        into 'WEB-INF/classes'
    }
}

tasks.register('createBuildIdFile') {
    new File("src/main/resources/", "buildId.txt").text = """${new SimpleDateFormat("yyyyMMddHHmmss").format(new Date())}"""
}

tasks.register('expandInitHtml', ExpandInitHtmlTask)
tasks.register('copyStaticResourcesFromFrontend', CopyStaticResourcesFromFrontendTask)

tasks.register('copyBarnacleConf', Copy) {
    def userHome = System.getProperty("user.home")
    def configDir = Paths.get(userHome).resolve(".m7r-host/config").normalize()
    if (!Files.exists(configDir)) throw new GradleException(configDir.toAbsolutePath().toString() + ' not found.')

    def barnacleConf = configDir.resolve("common/barnacle.conf").toFile()
    if (!barnacleConf.exists()) throw new GradleException(barnacleConf.absolutePath + ' not found.')

    inputs.file(barnacleConf)
    outputs.file("$rootDir/src/main/resources/barnacle.conf")

    from file(barnacleConf)
    into "$rootDir/src/main/resources"
}

tasks.register('copyWebAppConf', Copy) {
    def userHome = System.getProperty("user.home")
    def configDir = Paths.get(userHome).resolve(".m7r-host/config").normalize()
    if (!Files.exists(configDir)) throw new GradleException(configDir.toAbsolutePath().toString() + " not found." as String)

    def logbackConf = configDir.resolve("common/logback.xml").toFile()
    if (!logbackConf.exists()) throw new GradleException(logbackConf.absolutePath + ' not found.')
    inputs.file(logbackConf)
    outputs.file("$rootDir/conf/logback.xml")
    from file(logbackConf)

    into "$rootDir/conf"
}

clean {
    delete "$rootDir/src/main/resources/barnacle.conf"
    delete "$rootDir/conf/logback.xml"
    delete fileTree("$rootDir/src/main/webapp/WEB-INF").include('*.html')
}

processResources {
    dependsOn copyBarnacleConf
}

war.dependsOn expandInitHtml
war.dependsOn copyStaticResourcesFromFrontend
war.dependsOn copyBarnacleConf
war.dependsOn copyWebAppConf
war.dependsOn createBuildIdFile

defaultTasks 'war'